#! dotfiles
# ~/.linux
# v.4

determineRelease() {
    #for linux only
    # Prefer lsb_release
    # command -v foo >/dev/null 2>&1
    #For those unfamiliar with 'advanced' i/o redirection in bash: 1) 2>&- ("close output file descriptor 2", which is stderr) has the same result as 2> /dev/null; 2) >&2 is a shortcut for 1>&2, which you may recognize as "redirect stdout to stderr". See the Advanced Bash Scripting Guide i/o redirection page
    if [[ `command -v lsb_release` ]]
    then
        myDistro="`lsb_release -is`"
        myRelease="`lsb_release -rs`"
        myAllLSB="`lsb_release -a 2> /dev/null `"
        myLSBRelDist="`lsb_release -s -d`"
    else if [ -f /etc/redhat-release ]
        then
            myDistro="`cat /etc/redhat-release | awk '{print $1}'`"
            # if myDistro == Red go one word over
            if [ $myDistro == "Red" ]
            then
                myDistro="Redhat"
            fi
            myRelease="`cat /etc/redhat-release | awk '{for(i=1;i<=NF;i++)if($i~/release/)print $(i+1)}'`"
            myAllLSB="`cat /etc/redhat-release`"
        else
            myDistro="Unknown Disro"
            myRelease="Unknown Release"
            myAllLSB="Unknown Distro"
        fi
    fi
}

setupCentOS() {
    # seems OK after here, the lsb_release wasn't existant on one install of CentOS 6.
    # new thing in CentOS no lsb??
    if ! [ -f /usr/bin/lsb_release ]
    then
        # not know so print /etc/redhat_release
        if [ -f /etc/redhat-release ]
        then
            release="`cat /etc/redhat-release`"
            echo "This is $release"
        else
            echo "Could not determine release."
        fi
    else
        lsbRelease=`lsb_release -is`
        echo "This is $lsbRelease!"
    fi
	
    commonLinux
}

setupLinux() {
    determineRelease
    echo "Setting up environment for $OSNAME"
    # if centos then do
    if [ "$myDistro" == "CentOS" ]
    then
        # im centos
        setupCentOS
    else
    # are we Ubuntu?
        if [ "$myDistro" == "Ubuntu" ] || [ "$myDistro" == "elementary OS" ]
        then
            setupUbuntu
            else
                #if not CentOS or Ubuntu then check for redhat
                if [ "$myDistro" == "Redhat" ] || [ "$myDistro" == "RedHatEnterpriseServer" ] || [ "$myDistro" == "RedHatEnterpriseAS" ] || [ "$myDistro" == "EnterpriseEnterpriseServer" ] || [ "$myDistro" == "Fedora" ]
                then
                    setupRedhat
                else
                    echo "I couldn't determine the distro"
                    echo "$myAllLSB"
                fi
        fi
    # show the uptime if greater than 90 days
    checkUptime 90
    fi
    
    ## settings common in Linux
    # fancy service-all for linux
    alias service-all="service --status-all | grep -v Usage" 
   
    # alias for dmidecode product name
    alias dmisys="sudo dmidecode -s system-product-name"
    ## process local_profile OR .bash_aliases if it exists

    # unset determineRelease
    unset determineRelease
}

setupRedhat() {
    ## RedHat can be determined by presense of /etc/redhat-release file
    lsbRelease=`lsb_release -is`
    
    # could this be done with a case statement?
    if [ -f /etc/redhat-release ] 
    then
        {
            # this is redhat and print the lsb release
            echo "This is $lsbRelease!"
        }
        else
            {
                if [ -f /usr/bin/lsb_release ] && [ "`lsb_release -is`" == "CentOS" ]
                then
                    {
                        # this is CentOS and print the lsb release
                        echo "This is $lsbRelease!"
                    }
                    else if [ -f /usr/bin/lsb_release ] && [ "`lsb_release -is`" == "SUSE LINUX" ]
                    then
                        {   
                            # this is SUSE and print the lsb release
                            echo "This is $lsbRelease!"
                        }
                        else if [ -f /usr/bin/lsb_release ]
                        then
                        # not known, so print out lsb_release
                        {
                            echo "Unknown lsb_release distro:"
                            /usr/bin/lsb_release -a
                        }
                    fi
                fi
            fi
        }
    fi
    commonLinux
}

commonLinux() {

    # if /etc/sysconfig/network-scripts then cdsys alias
    if [ -d /etc/sysconfig/network-scripts/ ] ; then alias cdsys="cd /etc/sysconfig/network-scripts/"; fi
    
    # special alias for enableing rpmforge; probably should check for rpmforge repo
    alias yumrpm="yum --enablerepo=rpmforge"
    
    HOSTNAAM=`hostname -s | sed 's/[0-9]//g'`
    ## if redhat and hostname is nv related, set our super awesome alias for nvgui
    if [ "$HOSTNAAM" == "itsnetvault" ]
    then
    {
        echo "Setting alias 'nvguiStart'"
        alias nvguiStart="sudo XAUTHORITY=~/.Xauthority /usr/netvault/bin/nvgui  &"
    }
    fi

}

setupUbuntu () {
    printf "This is $myLSBRelDist \n"
	OSNAME="Ubuntu/Linux"

    # not sure if needed
    #setupOriginalrc
    
        # set a fancy prompt (non-color, unless we know we "want" color)
    case "$TERM" in
        xterm-color) color_prompt=yes;;
    esac
    # uncomment for a colored prompt, if the terminal has the capability; turned
    # off by default to not distract the user: the focus in a terminal window
    # should be on the output of commands, not on the prompt
    force_color_prompt=yes
    if [ -n "$force_color_prompt" ]; then
        if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
        # We have color support; assume it's compliant with Ecma-48
        # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
        # a case would tend to support setf rather than setaf.)
        color_prompt=yes
        else
        color_prompt=
        fi
    fi

    if [ "$color_prompt" = yes ]; then
        PS1="${debian_chroot:+($debian_chroot)}\[${BOLD}${MAGENTA}\]\u \[$WHITE\]at \[$PURPLE\]\h \[$WHITE\]in \[$GREEN\]\w\[$WHITE\]\$([[ -n \$(git branch 2> /dev/null) ]] && echo \" on \")\[$PURPLE\]\$(parse_git_branch)\[$WHITE\]\n\l \# \$ \[$RESET\]"
    else
        PS1="${debian_chroot:+($debian_chroot)}\u@\h:\w\$ "
    fi
    unset color_prompt force_color_prompt
    
    setupOriginalrc
    unset setupOriginalrc

# apt package managementÂ¬
alias aptitup="sudo apt-get update && sudo apt-get upgrade"
alias install="sudo apt-get install"
alias remove="sudo apt-get remove"
alias search="apt-cache search"

# make a ack alias to ack-grep if installed
if [ `command -v ack-grep` ]
then
	alias ack="ack-grep "
fi


}

setupOriginalrc () {
    ## start contents of original .bashrc in ubuntu
    # If not running interactively, don't do anything
    [ -z "$PS1" ] && return

    # don't put duplicate lines in the history. See bash(1) for more options
    # don't overwrite GNU Midnight Commander's setting of `ignorespace'.
    export HISTCONTROL=$HISTCONTROL${HISTCONTROL+,}ignoredups
    # ... or force ignoredups and ignorespace
    export HISTCONTROL=ignoreboth

    # check the window size after each command and, if necessary,
    # update the values of LINES and COLUMNS.
    shopt -s checkwinsize

    # make less more friendly for non-text input files, see lesspipe(1)
    [ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"
    # set variable identifying the chroot you work in (used in the prompt below)
    if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
        debian_chroot=$(cat /etc/debian_chroot)
    fi

    # set a fancy prompt (non-color, unless we know we "want" color)
    case "$TERM" in
        xterm-color) color_prompt=yes;;
    esac
    # uncomment for a colored prompt, if the terminal has the capability; turned
    # off by default to not distract the user: the focus in a terminal window
    # should be on the output of commands, not on the prompt
    force_color_prompt=yes
    if [ -n "$force_color_prompt" ]; then
        if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
        # We have color support; assume it's compliant with Ecma-48
        # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
        # a case would tend to support setf rather than setaf.)
        color_prompt=yes
        else
        color_prompt=
        fi
    fi

    # If this is an xterm set the title to user@host:dir
    case "$TERM" in
    xterm*|rxvt*)
        PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
        ;;
    *)
        ;;
    esac

    # enable color support of ls and also add handy aliases
    if [ -x /usr/bin/dircolors ]; then
        eval "`dircolors -b`"
        alias ls='ls --color=auto'
        alias dir='dir --color=auto'
        alias vdir='vdir --color=auto'
        alias grep='grep --color=auto'
        alias fgrep='fgrep --color=auto'
        alias egrep='egrep --color=auto'
    fi

    # some more ls aliases
    alias ll='ls -l'
    #alias la='ls -A'
    alias l='ls -CF'
    
    # Add an "alert" alias for long running commands.  Use like so:
    #   sleep 10; alert
    alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

    # enable programmable completion features (you don't need to enable
    # this, if it's already enabled in /etc/bash.bashrc and /etc/profile
    # sources /etc/bash.bashrc).
    if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
        . /etc/bash_completion
    fi
    
## end contents of original .bashrc from Ubuntu

# an alias for apt updateing
alias aptitup="sudo apt-get update && sudo apt-get upgrade"

}


###
##  WORK
#

setupLinux

unset determineRelease
unset setupCentOS
unset setupLinux
unset setupRedhat
unset commonLinux
unset setupUbuntu
